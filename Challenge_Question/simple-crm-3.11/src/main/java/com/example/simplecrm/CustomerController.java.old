package com.example.simplecrm;

import java.util.ArrayList;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;


// @Controller
// @ResponseBody    //postman is return to read json, but controller only return object. Responsebody help to return as json body

//Previous lesson using RestController which automatically help seriallize as Controller + ResponseBody


@RestController
// @RequestMapping("/api") //it's set the base path so ur link is localhost:8080/api 
//if i set my base path as "/customer", then below @PostMapping("") can let it empty but need "". So can save the code to be shorter
public class CustomerController {

    //(Arraylist move to repository in lesson 3.11)
    // private ArrayList<Customer> customers = new ArrayList<>();  //create an arrary to store customer to arraylist

    @GetMapping("/test")
    public String test(){
        return "Hello World!";
    }

    //CRUD
    //1. Create
    @PostMapping("/customers")
    // public Customer createCustomer(@RequestBody Customer customer){
    //     //RequestBody helps de-serializes the JSON and converts into Java Object. Because we are using Restcontroller to output as Json. Now we sort of revert it back
    //     //add the new customer to the arraylist
    //     customers.add(customer);
    //     return customer;
    // }
    //For Custom Status:
    // using ResponseEntity
    public ResponseEntity<Customer> createCustomer(@RequestBody Customer customer){
        //RequestBody helps de-serializes the JSON and converts into Java Object. Because we are using Restcontroller to output as Json. Now we sort of revert it back
        //add the new customer to the arraylist
        customers.add(customer);
        return new ResponseEntity<>(customer, HttpStatus.CREATED); // return a ResponseEntity class with customer object and customer http status
    }

    //if dont wante to manual create id auto, can use constructor--> written on Customer.

    //2. Read (Get and GetAll)
    //GetAll
    // @GetMapping("/customers")
    // public ArrayList<Customer>getAllCustomers(){
    //     return customers;
    // }
    @GetMapping("/customers")
    public ResponseEntity<ArrayList<Customer>>getAllCustomers(){
        return new ResponseEntity<>(customers, HttpStatus.OK);
    }

    //bring to customer service
    // //Get specific customer
    // // Helper Method
    // private int findIndexById(String id){
    //     for (Customer customer:customers){
    //         if(customer.getId().equals(id)){
    //             return customers.indexOf(customer);
    //         }
    //     }

    // return -1;
    // }

    // @GetMapping("/customers/{id}")
    // public Customer getCustomer(@PathVariable String id){
    //     return customers.get(findIndexById(id));
    // }
    @GetMapping("/customers/{id}")
    public ResponseEntity<Customer>  getCustomer(@PathVariable String id){
        return new ResponseEntity<>(customers.get(findIndexById(id)), HttpStatus.OK);
    }

    //when customer key in and id on path, the method add the id to findIndexByid to return the the index, then use customer.get(index) to output the customer



    //3. UPDATE
    //using Putmapping

    @PutMapping("/customers/{id}")
    // public Customer updateCustomer(@PathVariable String id, @RequestBody Customer customer){

    //     //RequestBody store the new input values in customer, then get the respective properties to set as updated customer
    //     Customer customerToUpdate = customers.get(findIndexById(id));
    //     customerToUpdate.setFirstName(customer.getFirstName());
    //     customerToUpdate.setLastName(customer.getLastName());
    //     customerToUpdate.setEmail(customer.getEmail());
    //     customerToUpdate.setContactNo(customer.getJobTitle());
    //     customerToUpdate.setJobTitle(customer.getJobTitle());
    //     customerToUpdate.setYearOfBirth(customer.getYearOfBirth());
    //     return customerToUpdate;
    // }
    public ResponseEntity<Customer>  updateCustomer(@PathVariable String id, @RequestBody Customer customer){

        //RequestBody store the new input values in customer, then get the respective properties to set as updated customer
        Customer customerToUpdate = customers.get(findIndexById(id));
        customerToUpdate.setFirstName(customer.getFirstName());
        customerToUpdate.setLastName(customer.getLastName());
        customerToUpdate.setEmail(customer.getEmail());
        customerToUpdate.setContactNo(customer.getJobTitle());
        customerToUpdate.setJobTitle(customer.getJobTitle());
        customerToUpdate.setYearOfBirth(customer.getYearOfBirth());
        return new ResponseEntity<>(customerToUpdate, HttpStatus.ACCEPTED);
    }

    //4.Delete
    // @DeleteMapping("/customers/{id}")
    // public void deleteCustomer(@PathVariable String id){
    //     customers.remove(findIndexById(id));
    // }
    //Custome http:
    @DeleteMapping("/customers/{id}")
    public  ResponseEntity<Customer> deleteCustomer(@PathVariable String id){
        customers.remove(findIndexById(id));
        return new ResponseEntity<>(null, HttpStatus.OK);
    }
    //Daniel answer: Because he is not returning object, so he put HTTP status to return & update HTTP status only
    // @DeleteMapping("/customers/{id}")
    // public  ResponseEntity <HttpStatus>deleteCustomer(@PathVariable String id){
    //     customers.remove(findIndexById(id));
    //     return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    // }


}
